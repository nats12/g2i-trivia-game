[{"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/index.tsx":"1","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/reportWebVitals.ts":"2","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/App.tsx":"3","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/theme/colours.tsx":"4","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/reducers/index.tsx":"5","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/screens/Quiz.tsx":"6","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/screens/Home.tsx":"7","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/screens/Results.tsx":"8","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/store/reducers/questions.tsx":"9","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/StyledLoader.tsx":"10","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/CentredContainer.tsx":"11","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/store/actions/questions.tsx":"12","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/ScreenHeading.tsx":"13","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/ScreenContainer.tsx":"14","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/HalfCircleBackground.tsx":"15","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/Button.tsx":"16","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/QuestionCard.tsx":"17","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/ScreenHeadings.tsx":"18","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/models/Question.tsx":"19","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/store/reducers/error.tsx":"20","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/store/actions/error.tsx":"21","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/Error.tsx":"22","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/store/reducers/results.tsx":"23","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/store/actions/results.tsx":"24","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/ResultRow.tsx":"25"},{"size":897,"mtime":1607330498808,"results":"26","hashOfConfig":"27"},{"size":425,"mtime":1607090206135,"results":"28","hashOfConfig":"27"},{"size":2679,"mtime":1607330498806,"results":"29","hashOfConfig":"27"},{"size":88,"mtime":1607244122252,"results":"30","hashOfConfig":"27"},{"size":343,"mtime":1607275766458,"results":"31","hashOfConfig":"27"},{"size":4776,"mtime":1607330498807,"results":"32","hashOfConfig":"27"},{"size":3193,"mtime":1607330498807,"results":"33","hashOfConfig":"27"},{"size":3084,"mtime":1607330498808,"results":"34","hashOfConfig":"27"},{"size":864,"mtime":1607330498809,"results":"35","hashOfConfig":"27"},{"size":263,"mtime":1607185970005,"results":"36","hashOfConfig":"27"},{"size":198,"mtime":1607253429620,"results":"37","hashOfConfig":"27"},{"size":1890,"mtime":1607330498808,"results":"38","hashOfConfig":"27"},{"size":166,"mtime":1607185970010,"results":"39","hashOfConfig":"27"},{"size":314,"mtime":1607275766456,"results":"40","hashOfConfig":"27"},{"size":279,"mtime":1607185970009,"results":"41","hashOfConfig":"27"},{"size":840,"mtime":1607275766455,"results":"42","hashOfConfig":"27"},{"size":370,"mtime":1607244122248,"results":"43","hashOfConfig":"27"},{"size":223,"mtime":1607275766457,"results":"44","hashOfConfig":"27"},{"size":567,"mtime":1607244122250,"results":"45","hashOfConfig":"27"},{"size":443,"mtime":1607253429624,"results":"46","hashOfConfig":"27"},{"size":172,"mtime":1607253429623,"results":"47","hashOfConfig":"27"},{"size":451,"mtime":1607253429618,"results":"48","hashOfConfig":"27"},{"size":645,"mtime":1607330498810,"results":"49","hashOfConfig":"27"},{"size":450,"mtime":1607330498809,"results":"50","hashOfConfig":"27"},{"size":463,"mtime":1607275766455,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tu9pfg",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"56"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/index.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/reportWebVitals.ts",[],["108","109"],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/App.tsx",["110","111"],"import React, { useCallback, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\n\nimport * as questionsActions from \"../store/actions/questions\";\nimport * as resultsActions from \"../store/actions/results\";\nimport \"../App.css\";\nimport { Results } from \"./screens/Results\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { Quiz } from \"./screens/Quiz\";\nimport { Home } from \"./screens/Home\";\n\nexport function App({\n  questions,\n  currentQuestion,\n  error,\n  results,\n  updateCurrentQuestion,\n  updateResults,\n  resetQuiz,\n  fetchQuestions,\n  resetCurrentQuestion,\n}: any) {\n  const history: any = createBrowserHistory();\n\n  const dispatch = useDispatch();\n\n  const fetchQs = useCallback(() => {\n    try {\n      dispatch(questionsActions.fetch());\n    } catch (err) {\n      console.log(err);\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    fetchQs();\n  }, [fetchQs]);\n\n  return (\n    <Switch data-test=\"component-app\">\n      <Route exact path=\"/\">\n        <Home\n          resetQuiz={resetQuiz}\n          questions={questions}\n          error={error}\n          fetchQuestions={fetchQuestions}\n          resetCurrentQuestion={resetCurrentQuestion}\n        />\n      </Route>\n      <Route path=\"/quiz\">\n        <Quiz\n          questions={questions}\n          results={results}\n          error={error}\n          currentQuestion={currentQuestion}\n          updateCurrentQuestion={updateCurrentQuestion}\n          updateResults={updateResults}\n          resetQuiz={resetQuiz}\n        />\n      </Route>\n      <Route path=\"/results\">\n        <Results results={results} error={error} />\n      </Route>\n    </Switch>\n  );\n}\n\nconst mapStateToProps = (state: any, ownProps: any) => ({\n  questions: state.questions.questions,\n  currentQuestion: state.questions.currentQuestion,\n  error: state.errors.error,\n  results: state.results.results,\n});\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    updateCurrentQuestion: (id: number) => {\n      dispatch(questionsActions.updateCurrentQuestion());\n    },\n    updateResults: (\n      id: number,\n      question: string,\n      correct_answer: string,\n      given_answer: string\n    ) => {\n      dispatch(\n        resultsActions.updateResults(id, question, correct_answer, given_answer)\n      );\n    },\n    resetQuiz: () => {\n      dispatch(resultsActions.resetResults());\n    },\n    fetchQuestions: () => {\n      dispatch(questionsActions.fetch());\n    },\n    resetCurrentQuestion: () => {\n      dispatch(questionsActions.resetCurrentQuestion());\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/theme/colours.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/reducers/index.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/screens/Quiz.tsx",["112","113","114","115","116"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { connect, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nimport * as questionsActions from \"../../store/actions/questions\";\nimport * as resultsActions from \"../../store/actions/results\";\nimport { colours } from \"../../theme/colours\";\nimport { IQuestionsState } from \"../../interfaces/StateInterfaces\";\nimport { StyledButton } from \"../styled/Button\";\nimport { CentredContainer } from \"../styled/CentredContainer\";\nimport QuestionCard from \"../styled/QuestionCard\";\nimport { ScreenContainer } from \"../styled/ScreenContainer\";\nimport { StyledH2 } from \"../styled/ScreenHeadings\";\nimport StyledLoader from \"../StyledLoader\";\nimport Question from \"../../models/Question\";\nimport { Error } from \"../Error\";\nimport { Results } from \"./Results\";\n\nconst QuizInnerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100vh;\n\n  .card {\n    width: 100% !important;\n  }\n`;\n\nconst ButtonsContainer = styled.div`\n  position: relative;\n  display: flex;\n  width: 100%;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nconst CardContainer = styled.div`\n  min-height: 300px;\n  max-height: 300px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\nexport const Quiz = ({\n  questions,\n  currentQuestion,\n  updateCurrentQuestion,\n  updateResults,\n  resetQuiz,\n  results,\n  error,\n}: any = []) => {\n  if (error && error !== null && error !== \"\") {\n    return (\n      <CentredContainer data-test=\"component-error\">\n        <Error>{error}</Error>\n      </CentredContainer>\n    );\n  }\n\n  if (questions && questions.length === 0 && error === null) {\n    return (\n      <CentredContainer>\n        <StyledLoader data-test=\"component-loading\" />\n      </CentredContainer>\n    );\n  }\n\n  if (results && results.length === questions.length) {\n    return <Results results={results} error={error} resetQuiz={resetQuiz} />;\n  }\n\n  const nextQuestion = (question: Question, answer: string) => {\n    updateCurrentQuestion();\n    updateResults(question.id, question.text, question.correct_answer, answer);\n  };\n\n  console.log(questions);\n  return (\n    <ScreenContainer data-test=\"component-quiz\">\n      <Container>\n        <Row xs={12}>\n          <Col>\n            <QuizInnerContainer>\n              {currentQuestion > questions?.length - 1 ? (\n                <Results\n                  results={results}\n                  error={error}\n                  resetQuiz={resetQuiz}\n                />\n              ) : (\n                <>\n                  <StyledH2>{questions[currentQuestion]?.category}</StyledH2>\n                  <CardContainer>\n                    <QuestionCard\n                      key={currentQuestion}\n                      questionNumber={currentQuestion}\n                    >\n                      {questions[currentQuestion]?.text}\n                    </QuestionCard>\n                  </CardContainer>\n                  <ButtonsContainer>\n                    <StyledButton\n                      onClick={() =>\n                        nextQuestion(questions[currentQuestion], \"True\")\n                      }\n                      border={colours.green}\n                      backgroundColour={colours.green}\n                    >\n                      True\n                    </StyledButton>\n                    <StyledButton\n                      onClick={() =>\n                        nextQuestion(questions[currentQuestion], \"False\")\n                      }\n                      border={colours.red}\n                      backgroundColour={colours.red}\n                    >\n                      False\n                    </StyledButton>\n                  </ButtonsContainer>\n                </>\n              )}\n            </QuizInnerContainer>\n          </Col>\n        </Row>\n      </Container>\n    </ScreenContainer>\n  );\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => ({\n  questions: state.questions.questions,\n  currentQuestion: state.questions.currentQuestion,\n  results: state.results.results,\n  error: state.errors.error,\n});\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    updateCurrentQuestion: (id: number) => {\n      dispatch(questionsActions.updateCurrentQuestion());\n    },\n    updateResults: (\n      id: number,\n      question: string,\n      correct_answer: string,\n      given_answer: string\n    ) => {\n      dispatch(\n        resultsActions.updateResults(id, question, correct_answer, given_answer)\n      );\n    },\n    resetQuiz: () => {\n      dispatch(resultsActions.resetResults());\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);\n","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/screens/Home.tsx",["117","118","119"],"import React, { useCallback, useEffect } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\n\nimport * as resultsActions from \"../../store/actions/results\";\nimport * as questionsActions from \"../../store/actions/questions\";\nimport { ScreenContainer } from \"../styled/ScreenContainer\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { ScreenHeading } from \"../styled/ScreenHeading\";\nimport styled from \"styled-components\";\nimport { StyledButton } from \"../styled/Button\";\nimport { colours } from \"../../theme/colours\";\nimport { HalfCircleBackground } from \"../styled/HalfCircleBackground\";\nimport StyledLoader from \"../StyledLoader\";\nimport { CentredContainer } from \"../styled/CentredContainer\";\nimport { Link } from \"react-router-dom\";\nimport { IQuestionsState } from \"../../interfaces/StateInterfaces\";\nimport { Error } from \"../Error\";\n\nconst HomeTopContainer = styled.div`\n  color: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n  justify-content: space-between;\n  height: 65vh;\n`;\nconst HomeBottomContainer = styled.div`\n  height: 35vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  overflow: hidden;\n`;\n\nexport const Home = ({\n  questions,\n  error,\n  results,\n  resetQuiz,\n  fetchQuestions,\n  resetCurrentQuestion,\n}: any = []) => {\n  useEffect(() => {\n    fetchQuestions();\n    resetQuiz();\n    resetCurrentQuestion();\n  }, [fetchQuestions, resetCurrentQuestion, resetQuiz]);\n\n  if (error !== null && error !== \"\") {\n    return (\n      <CentredContainer data-test=\"component-error\">\n        <Error>{error}</Error>\n      </CentredContainer>\n    );\n  }\n\n  if (questions.length === 0) {\n    return (\n      <CentredContainer>\n        <StyledLoader data-test=\"component-loading\" />\n      </CentredContainer>\n    );\n  }\n\n  return (\n    <ScreenContainer data-test=\"component-home\">\n      <Container>\n        <Row xs={12}>\n          <Col>\n            <HomeTopContainer>\n              <ScreenHeading>Welcome to the Trivia Challenge!</ScreenHeading>\n              <h2>You will be presented with 10 True or False questions.</h2>\n              <h2>Can you score 100%?</h2>\n            </HomeTopContainer>\n            <HomeBottomContainer>\n              <HalfCircleBackground>\n                <StyledButton backgroundColour={colours.primary}>\n                  <Link to=\"/quiz\">Begin</Link>\n                </StyledButton>\n              </HalfCircleBackground>\n            </HomeBottomContainer>\n          </Col>\n        </Row>\n      </Container>\n    </ScreenContainer>\n  );\n};\n\nconst mapStateToProps = (state: any, ownProps: any) => ({\n  questions: state.questions.questions,\n  error: state.errors.error,\n  results: state.results.results,\n});\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    resetQuiz: () => {\n      dispatch(resultsActions.resetResults());\n    },\n    fetchQuestions: () => {\n      dispatch(questionsActions.fetch());\n    },\n    resetCurrentQuestion: () => {\n      dispatch(questionsActions.resetCurrentQuestion());\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/screens/Results.tsx",["120","121"],"import React from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { AiOutlinePlus, AiOutlineMinus } from \"react-icons/ai\";\n\nimport { colours } from \"../../theme/colours\";\nimport { Error } from \"../Error\";\nimport { CentredContainer } from \"../styled/CentredContainer\";\nimport { ScreenContainer } from \"../styled/ScreenContainer\";\nimport { StyledH2 } from \"../styled/ScreenHeadings\";\nimport StyledLoader from \"../StyledLoader\";\nimport {\n  ResultRow,\n  ResultRowIconContainer,\n  ResultRowQuestion,\n} from \"../styled/ResultRow\";\nimport { StyledButton } from \"../styled/Button\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport * as resultsActions from \"../../store/actions/results\";\n\nconst ResultsInnerContainer = styled.div`\n  background-color: white;\n`;\n\nconst ResultsHeader = styled.header`\n  background-color: ${colours.primary};\n`;\n\nexport const Results = ({ results, error }: any) => {\n  if (error !== null && error !== \"\") {\n    return (\n      <CentredContainer data-test=\"component-error\">\n        <Error>{error}</Error>\n      </CentredContainer>\n    );\n  }\n\n  if (results.length === 0 && error === null) {\n    return (\n      <CentredContainer>\n        <StyledLoader data-test=\"component-loading\" />\n      </CentredContainer>\n    );\n  }\n\n  return (\n    <ScreenContainer data-test=\"component-results\" backgroundColour=\"white\">\n      <ResultsHeader>\n        <StyledH2>\n          You scored{\" \"}\n          {\n            results.filter((r: any) => {\n              return r.correct_answer === r.given_answer;\n            }).length\n          }{\" \"}\n          / {results.length}\n        </StyledH2>\n      </ResultsHeader>\n      <Container>\n        <Row>\n          <Col xs={12}>\n            <ResultsInnerContainer>\n              {results &&\n                results.map((r: any, key: number) => {\n                  return (\n                    <ResultRow key={key}>\n                      <ResultRowIconContainer>\n                        {r.correct_answer === r.given_answer ? (\n                          <AiOutlinePlus className=\"correct\" />\n                        ) : (\n                          <AiOutlineMinus className=\"incorrect\" />\n                        )}\n                      </ResultRowIconContainer>\n                      <ResultRowQuestion>{r.question}</ResultRowQuestion>\n                    </ResultRow>\n                  );\n                })}\n            </ResultsInnerContainer>\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={12}>\n            <StyledButton\n              border={colours.primary}\n              backgroundColour={colours.primary}\n              focusColour={colours.primary}\n            >\n              <Link to=\"/\">Play again</Link>\n            </StyledButton>\n          </Col>\n        </Row>\n      </Container>\n    </ScreenContainer>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    results: state.questions.results,\n    error: state.errors.error,\n  };\n};\n\nexport default connect(mapStateToProps)(Results);\n","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/store/reducers/questions.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/StyledLoader.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/CentredContainer.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/store/actions/questions.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/ScreenHeading.tsx",["122"],"import styled from \"styled-components\";\nimport { devices } from \"../../theme/devices\";\n\nexport const ScreenHeading = styled.h1`\n\n    color: white;\n    padding: 0 50px;\n    \n`;","/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/ScreenContainer.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/HalfCircleBackground.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/Button.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/QuestionCard.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/ScreenHeadings.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/models/Question.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/store/reducers/error.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/store/actions/error.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/Error.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/store/reducers/results.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/store/actions/results.tsx",[],"/Users/nataliemclaren/Sites/g2i-trivia-game-challenge/src/components/styled/ResultRow.tsx",[],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":2,"column":27,"nodeType":"129","messageId":"130","endLine":2,"endColumn":33},{"ruleId":"127","severity":1,"message":"131","line":24,"column":9,"nodeType":"129","messageId":"130","endLine":24,"endColumn":21},{"ruleId":"127","severity":1,"message":"132","line":1,"column":17,"nodeType":"129","messageId":"130","endLine":1,"endColumn":28},{"ruleId":"127","severity":1,"message":"133","line":1,"column":30,"nodeType":"129","messageId":"130","endLine":1,"endColumn":39},{"ruleId":"127","severity":1,"message":"134","line":1,"column":41,"nodeType":"129","messageId":"130","endLine":1,"endColumn":49},{"ruleId":"127","severity":1,"message":"135","line":3,"column":19,"nodeType":"129","messageId":"130","endLine":3,"endColumn":30},{"ruleId":"127","severity":1,"message":"136","line":9,"column":10,"nodeType":"129","messageId":"130","endLine":9,"endColumn":25},{"ruleId":"127","severity":1,"message":"132","line":1,"column":17,"nodeType":"129","messageId":"130","endLine":1,"endColumn":28},{"ruleId":"127","severity":1,"message":"135","line":2,"column":19,"nodeType":"129","messageId":"130","endLine":2,"endColumn":30},{"ruleId":"127","severity":1,"message":"136","line":18,"column":10,"nodeType":"129","messageId":"130","endLine":18,"endColumn":25},{"ruleId":"127","severity":1,"message":"137","line":19,"column":16,"nodeType":"129","messageId":"130","endLine":19,"endColumn":24},{"ruleId":"127","severity":1,"message":"138","line":20,"column":13,"nodeType":"129","messageId":"130","endLine":20,"endColumn":27},{"ruleId":"127","severity":1,"message":"139","line":2,"column":10,"nodeType":"129","messageId":"130","endLine":2,"endColumn":17},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"@typescript-eslint/no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'history' is assigned a value but never used.","'useCallback' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'useDispatch' is defined but never used.","'IQuestionsState' is defined but never used.","'Redirect' is defined but never used.","'resultsActions' is defined but never used.","'devices' is defined but never used.","no-global-assign","no-unsafe-negation"]